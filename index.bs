<pre class="metadata">
Title: Accelerated Shape Detection in Images
Repository: wicg/shape-detection-api
Status: ED
ED: https://wicg.github.io/shape-detection-api
Shortname: shape-detection-api
Level: 1
Editor: Miguel Casas-Sanchez, w3cid 82825, Google Inc., mcasas@google.com
Abstract: This document describes an API providing access to accelerated shape detectors (e.g. human faces) for still images and/or live image feeds.
Group: wicg
!Participate: <a href="https://www.w3.org/community/wicg/">Join the W3C Community Group</a>
!Participate: <a href="https://github.com/WICG/shape-detection-api">Fix the text through GitHub</a>
</pre>

<style>
table {
  border-collapse: collapse;
  border-left-style: hidden;
  border-right-style: hidden;
  text-align: left;
}
table caption {
  font-weight: bold;
  padding: 3px;
  text-align: left;
}
table td, table th {
  border: 1px solid black;
  padding: 3px;
}
</style>

# Introduction # {#introduction}

Photos and images constitute the largest chunk of the Web, and many include recognisable features, such as human faces or QR codes. Detecting these features is computationally expensive, but would lead to interesting use cases e.g. face tagging or detection of high saliency areas. Also, users interacting with WebCams or other Video Capture Devices have become accustomed to camera-like features such as the ability to focus directly on human faces on the screen of their devices. This is particularly true in the case of mobile devices, where hardware manufacturers have long been supporting these features. Unfortunately, Web Apps do not yet have access to these hardware capabilities, which makes the use of computationally demanding libraries necessary.

## Shape detection in the wild

Feature detection belongs to a broader, so called object-class detection where "the task is to find the locations and sizes of all objects in an image that belong to a given class. Examples include upper torsos, pedestrians, and cars." [[wikipedia]] . Face detection, in particular, focuses on detecting near-front facing human faces. A widespread class of detection algorithms use a hunting algorithm that tries to match a cascade of classifiers in several areas of the image and for several potential object sizes, which turns the process into extremely computationally complex. It is not the idea here to compare those algorithms, nor to offer a software fallback implementation of any of them for the Web, but to offer the available hardware capabilities, if any, to the Web Applications.

<p class="note">
Note that Face Detection (resp., Object) is not the same as Face Tracking nor Face Recognition, albeit those operations are usually interrelated.
</p>

<p class="note">Some Web Apps -gasp- run Face Detection in Javascript. A performance comparison of some such libraries can be found in <a href=https://github.com/mtschirs/js-objectdetect#performance>mtschirs' GitHub repo</a>
</p>

Some use cases of having object/face detection in the Web:


* Live video feeds would like to identify faces in a picture/video as highly salient areas to e.g. give hints to image or video encoders.
* Social network pages would like to quickly identify the human faces in a picture/video and offer the user e.g. the possibility of tagging which name corresponds to which face.
* Face detection is the first step before Face Recognition: detected faces are used for the recognition phase, greatly speeding the process.
* Fun! you can map glasses, funny hats and other overlays on top of the detected faces
* QR/barcode detection can be used for quick user registration, e.g. for <a href="https://twitter.com/RegistertoVote/status/733123511128981508">voting purposes</a>.
* QR codes can be used as markers to overlay synthetic Augmented Reality objects (see e.g. <a href="http://www.multidots.com/augmented-reality/">here</a>).

Finally, note that using a particular Face/Object Detector does not preclude using others; in this case the hardware provided results can, e.g. be used as precursor or in parallel to user-defined ones.

# Shape Detection API # {#api}

Individual browsers MAY provide Detectors indicating the availability of hardware providing a {{detect()}} accelerated operation.

Detection results are encoded in sequences of {{DetectedObject}}s representing areas of an input {{ImageBitmapSource}} where the looked-for object is found. Each {{DetectedObject}} consists of, at least, a {{DOMRectReadOnly}}.

<pre class="idl">
[NoInterfaceObject, exposed=Window,Worker]
interface DetectedObject {
   [SameObject] readonly attribute DOMRectReadOnly boundingBox;
};
</pre>

## Image sources for detection

<pre class="idl">
typedef (CanvasImageSource or
         Blob or
         ImageData) ImageBitmapSource;
</pre>

<p class="note">
This section is inspired by [[canvas2dcontext#image-sources-for-2d-rendering-contexts]].
</p>

{{ImageBitmapSource}} allows objects implementing any of a number of interfaces to be used as image sources for the detection process.

* When an {{ImageBitmapSource}} object represents an {{HTMLImageElement}}, the element's image must be used as the source image. Specifically, when an {{ImageBitmapSource}} object represents an animated image in an {{HTMLImageElement}}, the user agent must use the default image of the animation (the one that the format defines is to be used when animation is not supported or is disabled), or, if there is no such image, the first frame of the animation.

* When an {{ImageBitmapSource}} object represents an {{HTMLVideoElement}}, then the frame at the current playback position when the method with the argument is invoked must be used as the source image when processing the image, and the source image's dimensions must be the <a href="https://drafts.csswg.org/css2/conform.html#intrinsic">intrinsic dimensions</a> of the media resource (i.e. after any aspect-ratio correction has been applied).

* When an {{ImageBitmapSource}} object represents an {{HTMLCanvasElement}}, the element's bitmap must be used as the source image.

When the UA is required to use a given type of {{ImageBitmapSource}} as input argument for the {{detect()}} method of whichever detector, it MUST run these steps:

* If any {{ImageBitmapSource}} have an effective script origin ([[HTML#concept-origin]]) which is not the same as the Document's effective script origin, then reject the Promise with a new {{DOMException}} whose name is {{SecurityError}}.

* If the {{ImageBitmapSource}} is an {{HTMLImageElement}} object that is in the |broken| state, then reject the Promise with a new {{DOMException}} whose name is {{InvalidStateError}}, and abort any further steps.

* If the {{ImageBitmapSource}} is an {{HTMLImageElement}} object that is not fully decodable then reject the Promise with a new {{DOMException}} whose name is {{InvalidStateError}}, and abort any further steps

* If the {{ImageBitmapSource}} is an {{HTMLVideoElement}} object whose <a href="https://html.spec.whatwg.org/multipage/embedded-content.html#ready-states:dom-media-readystate">|readyState|</a> attribute is either |HAVE_NOTHING| or |HAVE_METADATA|, then reject the Promise with a new {{DOMException}} whose name is {{InvalidStateError}}, and abort any further steps.

* If the {{ImageBitmapSource}} argument is an {{HTMLCanvasElement}} whose bitmap's |origin-clean| ([[HTML#concept-canvas-origin-clean]]) flag is false, then reject the Promise with a new {{DOMException}} whose name is {{SecurityError}}, and abort any further steps.

Note that if the {{ImageBitmapSource}} is an object with either a horizontal dimension or a vertical dimension equal to zero, then the Promise will be simply resolved with an empty `DetectedObject` sequence.


## Face Detection API

{{FaceDetector}} represents an underlying accelerated platform's component for detection of human faces in images. It can be created with an optional Dictionary of {{FaceDetectorOptions}}. It provides a single {{detect()}} operation on an {{ImageBitmapSource}} which result is a Promise. This method MUST reject this promise in the cases detailed in [[#image-sources-for-detection]]; otherwise it MAY queue a task that utilizes the OS/Platform resources to resolve the Promise with a <code>Sequence</code> of {{DetectedFace}}s, each one essentially consisting on and delimited by a |boundingBox|.

<pre class="idl">
dictionary FaceDetectorOptions {
  unsigned short maxDetectedFaces;
  // Consider: boolean fastMode;
};

[Exposed=(Window,Worker), Constructor(optional FaceDetectorOptions faceDetectorOptions)]
interface FaceDetector {
    Promise&lt;sequence&lt;DetectedFace>> detect(ImageBitmapSource image);
};
</pre>

<pre class="idl">
interface DetectedFace {
    // [SameObject] readonly attribute unsigned long id;
    // [SameObject] readonly attribute sequence<Landmark>? landmarks;
};
DetectedFace implements DetectedObject;
</pre>

## Barcode Detection API

{{BarcodeDetector}} represents an underlying accelerated platform's component for detection in images of QR codes or barcodes.It provides a single {{detect()}} operation on an {{ImageBitmapSource}} which result is a Promise.This method MUST reject this promise in the cases detailed in [[#image-sources-for-detection]]; otherwise it MAY queue a task that utilizes the OS/Platform resources to resolve the Promise with a <code>Sequence</code> of {{DetectedBarcode}}s, each one essentially consisting on and delimited by a |boundingBox|, and possibly a |rawValue| decoded `DOMString`.

<pre class="idl">
[Exposed=(Window,Worker), Constructor()]
interface BarcodeDetector {
    Promise&lt;sequence&lt;DetectedBarcode>> detect(ImageBitmapSource image);
};
</pre>

<pre class="idl">
interface DetectedBarcode {
    [SameObject] readonly attribute DOMString rawValue;
};
DetectedBarcode implements DetectedObject;
</pre>

<p class="issue">
Finalize the attributes of {{DetectedBarCode}}, taking e.g. the <a href="https://developers.google.com/android/reference/com/google/android/gms/vision/barcode/package-summary">Android Barcode</a> and <a href="https://developer.apple.com/library/ios/documentation/QuartzCore/Reference/CIQRCodeFeature/index.html#//apple_ref/occ/instp/CIQRCodeFeature/messageString">Apple's QICRCodeFeature</a> into account.
</p>

# Examples # {#examples}

<p class="note">
Slightly modified/extended versions of these examples (and more) can be found in
 e.g. <a href="https://codepen.io/collection/DwWVJj/">this codepen collection</a>.
</p>

## Platform support for a given detector

<div class="note">
The following example can also be found in e.g. <a
href="https://codepen.io/miguelao/pen/PbYpMv?editors=0010">this codepen</a>
with minimal modifications.
</div>

<div class="example" highlight="javascript">

<pre>
if (window.FaceDetector == undefined) {
	console.error('Face Detection not supported on this platform');
}
if (window.BarcodeDetector == undefined) {
  console.error('Barcode Detection not supported on this platform');
}
</pre>
</div>

## Face Detection

<div class="note">
The following example can also be found in e.g.
<a href="https://codepen.io/miguelao/pen/YGrYAm?editors=0010">this codepen</a>,
(or <a
href="https://codepen.io/miguelao/pen/ORYbbm?editors=0010">this one
 with bounding box overlay on the input image</a>).
</div>

<div class="example" highlight="javascript">
<pre>
let faceDetector = new FaceDetector({fastMode: true, maxDetectedFaces: 1});
// Assuming |theImage| is e.g. a &lt;img> content, or a Blob.

faceDetector.detect(theImage)
.then(detectedFaces => {
  for (const face of detectedFaces) {
    console.log(' Face @ (${face.boundingBox.x}, ${face.boundingBox.y}),' +
        ' size ${face.boundingBox.width}x${face.boundingBox.height}');
  }
}).catch(() => {
  console.error("Face Detection failed, boo.");
})
</pre>
</div>

## Barcode Detection

<div class="example" highlight="javascript">
<pre>
let barcodeDetector = new BarcodeDetector();
// Assuming |theImage| is e.g. a &lt;img> content, or a Blob.

barcodeDetector.detect(theImage)
.then(detectedCodes => {
  for (const barcode of detectedCodes) {
    console.log(' Barcode ${barcode.rawValue}' +
        ' @ (${barcode.boundingBox.x}, ${barcode.boundingBox.y}) with size' +
        ' ${barcode.boundingBox.width}x${barcode.boundingBox.height}');
  }
}).catch(() => {
  console.error("Barcode Detection failed, boo.");
})
</pre>
</div>


<pre class="anchors">
spec: ECMAScript; urlPrefix: https://tc39.github.io/ecma262/#
    type: interface
        text: Array; url: sec-array-objects
        text: Promise; url:sec-promise-objects
        text: TypeError; url: sec-native-error-types-used-in-this-standard-typeerror
</pre>

<pre class="link-defaults">
spec: html
    type: dfn
        text: allowed to show a popup
        text: in parallel
        text: incumbent settings object
</pre>

<pre class="biblio">
{
  "wikipedia": {
      "href": "https://en.wikipedia.org/wiki/Object-class_detection",
      "title": "Object-class Detection Wikipedia Entry",
      "publisher": "Wikipedia",
      "date": "14 September 2016"
  },
  "canvas2dcontext": {
      "authors": [ "Rik Cabanier", "Jatinder Mann", "Jay Munro", "Tom Wiltzius",
                   "Ian Hickson"],
      "href": "https://www.w3.org/TR/2dcontext/",
      "title": "HTML Canvas 2D Context",
      "status": "REC"
  }
}
</pre>

